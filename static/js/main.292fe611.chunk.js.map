{"version":3,"sources":["components/BgImage.js","components/ChooseEvidence.js","components/LeftBar.js","components/Table.js","components/MainBody.js","components/ContentWrapper.js","App.js","index.js"],"names":["BgImage","id","arrayIndex","ChooseEvidence","eviId","handleEviUpdate","blankName","useState","eviName","setEviName","useFitText","fontSize","ref","subtractIndex","evidenceTypes","length","indexAlreadySet","increaseIndex","index","className","onClick","style","LeftBar","Table","possibleGhosts","currentEvidence","content","ghost","possibilityClass","makeEvidenceGreen","possible","evidence","find","element","htmlToAdd","name","strength","weakness","unshift","push","class","MainBody","possibleEvidence","console","log","ghosts","setInitialPossibleGhosts","ContentWrapper","setCurrentEvidence","setPossibleEvidence","calculatePossibleGhosts","result","checkEvidenceMatch","ghostPossible","ghostEvidence","getPossibleEvidence","filter","newCurrentEvidence","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.292fe611.chunk.js","sourcesContent":["const BgImage = () => {\n    return (\n        <div id=\"bg-image\"></div>\n    );\n}\n\nexport default BgImage;","import { useState } from 'react';\nimport evidenceTypes from '../config/evidenceTypes.json';\nimport useFitText from 'use-fit-text';\nlet arrayIndex = [-1, -1, -1];\n\nconst ChooseEvidence = ({eviId, handleEviUpdate}) => {\n\n    const blankName = 'Evidence ' + (+eviId + 1);\n    const [eviName, setEviName] = useState(blankName);\n    const { fontSize, ref } = useFitText();\n    \n    const handleLeftArrow = () => {\n\n        subtractIndex(eviId);\n        \n        if (arrayIndex[eviId] === -1) {\n            handleEviUpdate(eviId, null);\n            setEviName(blankName);\n        } else {\n            handleEviUpdate(eviId, evidenceTypes[arrayIndex[eviId]]);\n            setEviName(evidenceTypes[arrayIndex[eviId]]);\n        }\n\n    }\n\n    const handleRightArrow = () => {\n\n        increaseIndex();\n        \n        if (arrayIndex[eviId] === -1) {\n            handleEviUpdate(eviId, null);\n            setEviName(blankName);\n        } else {\n            handleEviUpdate(eviId, evidenceTypes[arrayIndex[eviId]]);\n            setEviName(evidenceTypes[arrayIndex[eviId]]);\n        }\n    }\n\n    const subtractIndex = () => {\n        if (arrayIndex[eviId] > 0) {\n            arrayIndex[eviId] -= 1;\n        } else if (arrayIndex[eviId] === 0) {\n            arrayIndex[eviId] = -1;\n\n        } else {\n            arrayIndex[eviId] = evidenceTypes.length - 1;\n        }\n\n        if (indexAlreadySet()) {\n            subtractIndex();\n        }\n    }\n\n    const increaseIndex = () => {\n        if (arrayIndex[eviId] >= -1 && arrayIndex[eviId] < evidenceTypes.length - 1) {\n            arrayIndex[eviId]++;\n        } else {\n            arrayIndex[eviId] = -1;\n        }\n\n        if (indexAlreadySet()) {\n            increaseIndex();\n        }\n    }\n\n    const indexAlreadySet = () => {\n\n        for (const index in arrayIndex) {\n            if (index !== eviId && arrayIndex[index] === arrayIndex[eviId] && arrayIndex[index] !== -1) return true;\n        }\n\n        return false;\n    }\n\n    return (\n        <div className=\"evidence-wrapper\">\n            <button className=\"arrow\" onClick={ () => handleLeftArrow() }>❮</button>\n            <div className=\"evidence-name\" ref={ ref } style={{ fontSize }}>{ eviName }</div>\n            <button className=\"arrow\" onClick={ () => handleRightArrow() }>❯</button>\n        </div>\n    );\n}\n\nexport default ChooseEvidence;","import ChooseEvidence from './ChooseEvidence';\n\nconst LeftBar = ({ handleEviUpdate }) => {\n    return (\n        <div className=\"left-bar\">\n            <div className=\"left-bar-title-wrapper\">\n                <h1>Phasmopicker</h1>\n                <h2>Choose evidence</h2>\n            </div>\n            <ChooseEvidence eviId=\"0\" handleEviUpdate={ handleEviUpdate } />\n            <ChooseEvidence eviId=\"1\" handleEviUpdate={ handleEviUpdate } />\n            <ChooseEvidence eviId=\"2\" handleEviUpdate={ handleEviUpdate } />\n        </div>\n    );\n}\n\nexport default LeftBar;","\n\nconst Table = ({ possibleGhosts, currentEvidence }) => {\n\n    const content = [];\n\n    for (const ghost of possibleGhosts) {\n        let possibilityClass = '';\n        let makeEvidenceGreen = ['', '', ''];\n\n        if (!ghost.possible) \n            possibilityClass = 'table-evidence-gray';\n        else {\n            possibilityClass = [];\n            for (const evidence of currentEvidence) {\n                ghost.evidence.find((element, index) => {\n                    if (element === evidence)\n                        makeEvidenceGreen[index] = 'table-evidence-green';\n                    return;\n                });\n                    \n            }\n        }\n\n        const htmlToAdd = (\n            <tr>\n                <td className={ possibilityClass }>{ ghost.name }</td>\n                <td>\n                    <p className={`table-evidence ${ possibilityClass } ${ makeEvidenceGreen[0] }`}>{ ghost.evidence[0] }</p>\n                    <p className={`table-evidence ${ possibilityClass } ${ makeEvidenceGreen[1] }`}>{ ghost.evidence[1] }</p> \n                    <p className={`table-evidence ${ possibilityClass } ${ makeEvidenceGreen[2] }`}>{ ghost.evidence[2] }</p>\n                </td>\n                <td className={ possibilityClass }>{ ghost.strength }</td>\n                <td className={ possibilityClass }>{ ghost.weakness }</td>\n            </tr>\n        );\n\n        if (ghost.possible)\n            content.unshift(htmlToAdd);\n        else\n            content.push(htmlToAdd);\n    }\n\n    return (\n        <div class=\"table-wrapper\">\n                <table>\n                    <thead>\n                        <tr>\n                        <th>Name</th>\n                        <th>Evidence</th>\n                        <th>Strength</th>\n                        <th>Weakness</th>\n                        </tr>\n                    </thead>\n                    \n                    <tbody>\n                        { content }\n                    </tbody>\n                </table>\n            </div>\n    );\n}\n\nexport default Table;","import PossibleEvidenceBar from \"./PossibleEvidenceBar\";\nimport Table from './Table';\n\nconst MainBody = ({ possibleGhosts, possibleEvidence, currentEvidence }) => {\n    \n    console.log(possibleEvidence);\n\n    return (\n        <div id=\"main-body\" class=\"main-body\">\n            <h1>Possible ghosts</h1>\n            {/* <PossibleEvidenceBar possibleEvidence={ possibleEvidence } /> */}\n            <Table possibleGhosts={ possibleGhosts } currentEvidence={ currentEvidence } />\n        </div>\n    );\n}\n\nexport default MainBody;","import { useState } from 'react';\nimport LeftBar from './LeftBar';\nimport MainBody from './MainBody';\nimport ghosts from '../config/ghosts.json';\nimport evidenceTypes from '../config/evidenceTypes.json';\n\nconst setInitialPossibleGhosts = () => {\n    for (let ghost of ghosts) {\n        ghost.possible = true;\n    }\n    return ghosts;\n}\n\nlet possibleGhosts = setInitialPossibleGhosts();\n\nconst ContentWrapper = () => {\n\n    const [currentEvidence, setCurrentEvidence] = useState([null, null, null]);\n    const [possibleEvidence, setPossibleEvidence] = useState(evidenceTypes);\n\n    const handleEviUpdate = (id, evidence) => {\n        let newCurrentEvidence = currentEvidence;\n        newCurrentEvidence[id] = evidence;\n        setCurrentEvidence(newCurrentEvidence);\n        possibleGhosts = calculatePossibleGhosts();\n        setPossibleEvidence(getPossibleEvidence());\n        console.log(currentEvidence);\n    };\n\n    const calculatePossibleGhosts = () => {\n        let result = [];\n\n        for (let ghost of ghosts) {\n            ghost.possible = checkEvidenceMatch(ghost);\n            result.push(ghost);\n        }\n\n        return result;\n    }\n\n    const checkEvidenceMatch = (ghost) => {\n        let ghostPossible = true;\n        for (const evidence of currentEvidence) {\n            if (evidence) {\n                if (!ghostPossible) break;\n\n                if (!ghost.evidence.find(ghostEvidence => ghostEvidence === evidence)) \n                    ghostPossible = false;\n            }\n        }\n\n        return ghostPossible;\n    }\n\n    const getPossibleEvidence = () => {\n        let result = [];\n        for (const ghost of possibleGhosts) {\n            if (ghost.possible === true) {\n                for (const evidence of ghost.evidence) {\n                    if (!result.find(element => element === evidence))\n                        result.push(evidence); \n                }\n            }\n        }\n\n        for (const evidence of currentEvidence) {\n            result = result.filter(element => element !== evidence)\n        }\n\n        return result;\n    }\n\n\n\n    return (\n        <div id=\"content\">\n            <LeftBar handleEviUpdate={ handleEviUpdate } />\n            <MainBody possibleGhosts={ possibleGhosts} possibleEvidence={ possibleEvidence } currentEvidence={ currentEvidence }/>\n        </div>\n    );\n}\n\nexport default ContentWrapper;","import './App.css';\nimport './main.css';\nimport './mobile-deivces.css';\nimport BgImage from './components/BgImage';\nimport ContentWrapper from './components/ContentWrapper';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BgImage />\n      <ContentWrapper />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}